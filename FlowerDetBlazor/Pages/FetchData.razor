@page "/imageclassificationbulk"
@using Microsoft.ML;
@using System.Threading;
@inject IJSRuntime JSRuntime
@using System.Drawing;
@using System.IO;
@using System.Drawing.Imaging;
@using System.Diagnostics;


<PageTitle>Image Classification Bulk</PageTitle>

<h1>Image Classification Bulk using ML.NET</h1>

<div>
    <InputFile OnChange="HandleFileSelection" accept="image/*" Multiple="true"/>
</div>

@if (classificationResults != null)
{
    <div>
        <h4>Classification Results:</h4>
        <p>Total Number of Images: @classificationResults.TotalImages</p>
        <table>
            <thead>
                <tr>
                    <th>Label</th>
                    <th>Number of Images</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in classificationResults.LabelResults)
                {
                    <tr>
                        <td>@result.Label</td>
                        <td>@result.ImageCount</td>
                    </tr>
                }
            </tbody>
        </table>
        <p>Total Time Taken: @classificationResults.TotalTimeTaken.TotalSeconds.ToString("F2") seconds</p>
    </div>
}

@code {
    private List<byte[]> imageBytesList;
    private List<string> imageNamesList;
    private ClassificationResults classificationResults;

    private MLContext mlContext;
    private PredictionEngine<MLModel.ModelInput, MLModel.ModelOutput> predictionEngine;

 

    protected override async Task OnInitializedAsync()
    {
        // Initialize the MLContext
        mlContext = new MLContext();
        var modelPath = "C:\\MyFiles\\DemoCode\\MAUI\\FlowerDetBlazor\\FlowerDetBlazor\\MLModel.zip";

        try
        {
            // Load the ML model from the specified path
            var mlModel = mlContext.Model.Load(modelPath, out var modelSchema);
            predictionEngine = mlContext.Model.CreatePredictionEngine<MLModel.ModelInput, MLModel.ModelOutput>(mlModel);
        }
        catch (Exception ex)
        {
            await ShowErrorMessage("Failed to load ML model: " + ex.Message);
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        try
        {
            imageBytesList = new List<byte[]>();
            imageNamesList = new List<string>();
            classificationResults = null;

            var files = e.GetMultipleFiles();
            foreach (var file in files)
            {
                var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                var imageBytes = memoryStream.ToArray();

                imageBytesList.Add(imageBytes);
                imageNamesList.Add(file.Name);
            }

            await ClassifyImages();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage("File selection failed: " + ex.Message);
        }
    }

    private async Task ClassifyImages()
    {
        try
        {
            classificationResults = new ClassificationResults();

            var stopwatch = new Stopwatch();
            stopwatch.Start();

            for (int i = 0; i < imageBytesList.Count; i++)
            {
                var imageBytes = imageBytesList[i];
                var imageName = imageNamesList[i];

                // Create a model input using the uploaded image
                MLModel.ModelInput sampleData = new MLModel.ModelInput()
                    {
                        ImageSource = imageBytes,
                    };

                try
                {
                    // Perform prediction on a separate thread
                    var predictionTask = Task.Factory.StartNew(() =>
                    {
                        return predictionEngine.Predict(sampleData);
                    }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);

                    var predictionResult = await predictionTask;

                    // Update the classification results
                    var label = predictionResult.PredictedLabel;
                    var existingLabelResult = classificationResults.LabelResults.FirstOrDefault(lr => lr.Label == label);
                    if (existingLabelResult != null)
                    {
                        existingLabelResult.ImageCount++;
                    }
                    else
                    {
                        classificationResults.LabelResults.Add(new LabelResult { Label = label, ImageCount = 1 });
                    }
                }
                catch (Exception ex)
                {
                    await ShowErrorMessage("Prediction failed for image '" + imageName + "': " + ex.Message);
                }
            }

            stopwatch.Stop();
            classificationResults.TotalImages = imageBytesList.Count;
            classificationResults.TotalTimeTaken = stopwatch.Elapsed;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await ShowErrorMessage("Image classification failed: " + ex.Message);
        }
    }

    // Show an error message using JavaScript interop
    private async Task ShowErrorMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    public class ClassificationResults
    {
        public int TotalImages { get; set; }
        public List<LabelResult> LabelResults { get; set; } = new List<LabelResult>();
        public TimeSpan TotalTimeTaken { get; set; }
    }

    public class LabelResult
    {
        public string Label { get; set; }
        public int ImageCount { get; set; }
    }
}
